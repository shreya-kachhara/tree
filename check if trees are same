/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isSameTree(TreeNode* p, TreeNode* q) {
        if(p==NULL && q==NULL){
            return 1;
        }else if((p==NULL && q!=NULL) || (p!=NULL && q==NULL)){
            return 0;
        }else{
            queue<TreeNode*> qq;
            qq.push(p);
            queue<TreeNode*> qqq;
            qqq.push(q);

            while(!qq.empty() && !qqq.empty()){
                TreeNode* temp1=qq.front();
                qq.pop();
                TreeNode* temp2=qqq.front();
                qqq.pop();
                if(temp1->val==temp2->val){
                    if(temp1->left && temp2->left){
                        qq.push(temp1->left);
                        qqq.push(temp2->left);
                    }else if((!temp1->left && temp2->left) || (temp1->left && !temp2->left)){
                        return 0;
                    }
                    if(temp1->right && temp2->right){
                        qq.push(temp1->right);
                        qqq.push(temp2->right);
                    }else if((!temp1->right && temp2->right) || (temp1->right && !temp2->right)){
                        return 0;
                    }
                    // if(temp2->left){
                    //     qqq.push(temp2->left);
                    // }
                    // if(temp2->right){
                    //     qqq.push(temp2->right);
                    // }
                }else{
                    return 0;
                }
                if(qq.empty() && !qqq.empty()){
                    return 0;
                }
                if(!qq.empty() && qqq.empty()){
                    return 0;
                }
            }
        }
        return 1;
    }
};

//{ Driver Code Starts
/* program to construct tree using inorder and postorder traversals */
#include <bits/stdc++.h>
using namespace std;

/* A binary tree node has data, pointer to left child
   and a pointer to right child */
struct Node {
    int data;
    struct Node* left;
    struct Node* right;

    Node(int x) {
        data = x;
        left = right = NULL;
    }
};

/* This funtcion is here just to test buildTreeUtil() */
void preOrder(Node* node) {
    if (node == NULL)
        return;

    /* then print the data of node */
    printf("%d ", node->data);

    /* first recur on left child */
    preOrder(node->left);

    /* now recur on right child */
    preOrder(node->right);
}


// } Driver Code Ends
/* Tree node structure

struct Node
{
    int data;
    struct Node* left;
    struct Node* right;

    Node(int x){
        data = x;
        left = right = NULL;
    }
};*/

class Solution {
  public:
  
    int findPosition(int in[], int element, int inStartIndex, int inEndIndex ){
        for(int i=inStartIndex; i<=inEndIndex; i++){
            if(element== in[i]){
                return i;
            }
        }
        return -1;
    }
    
    
    Node* solve(int in[], int post[], int n, int &PostIndex, int inStartIndex, int inEndIndex){
        
        if(PostIndex<0 || inStartIndex>inEndIndex){
            return NULL;
        }
        Node* root=new Node(post[PostIndex]);
        int positionInInorder=findPosition(in, post[PostIndex], inStartIndex, inEndIndex);
        PostIndex--;
        root->right=solve(in, post, n, PostIndex, positionInInorder+1, inEndIndex);
        root->left=solve(in, post, n, PostIndex, inStartIndex, positionInInorder-1);
        
        return root;
    }
    
    Node *buildTree(int n, int in[], int post[]) {
        int PostIndex=n-1;
        return solve(in, post, n, PostIndex, 0, n-1);
    }
};


//{ Driver Code Starts.

int main() {
    int t, n;
    cin >> t;
    while (t--) {
        cin >> n;
        int in[n], post[n];
        for (int i = 0; i < n; i++)
            cin >> in[i];
        for (int i = 0; i < n; i++)
            cin >> post[i];
        Solution obj;
        Node* root = obj.buildTree(n, in, post);
        preOrder(root);
        cout << endl;
    }
    return 0;
}

// } Driver Code Ends
